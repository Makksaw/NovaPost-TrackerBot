import telebot
import requests
from time import sleep
import json

bot = telebot.TeleBot('YOUR TELEGRAM BOT API KEY')

kb = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
btn = telebot.types.KeyboardButton(text='–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ—Å–∏–ª–∫—É')
btn1 = telebot.types.KeyboardButton(text='–ü–µ—Ä–µ–≤–∞–≥–∏ –±–æ—Ç–∞')
kb.add(btn, btn1)

@bot.message_handler(commands=['start'])
def get_command(message):
    if message.text == '/start':
        if message.from_user.last_name:
            bot.send_message(message.chat.id, f'–ü—Ä–∏–≤—ñ—Ç {message.from_user.first_name} {message.from_user.last_name}! –Ø –±–æ—Ç –∫–æ—Ç—Ä–∏–π –≤—ñ–¥—Å–ª—ñ–¥–∫–æ–≤—É—î –ø–æ—Å–∏–ª–∫–∏ –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏. –î–ª—è —Ç–æ–≥–æ —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ—Å–∏–ª–∫—É - –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ—Å–∏–ª–∫—É".', reply_markup=kb)
        else:
            bot.send_message(message.chat.id, f'–ü—Ä–∏–≤—ñ—Ç {message.from_user.first_name}! –Ø –±–æ—Ç –∫–æ—Ç—Ä–∏–π –≤—ñ–¥—Å–ª—ñ–¥–∫–æ–≤—É—î –ø–æ—Å–∏–ª–∫–∏ –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏. –î–ª—è —Ç–æ–≥–æ —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ—Å–∏–ª–∫—É - –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ—Å–∏–ª–∫—É".', reply_markup=kb)

@bot.message_handler(content_types=['text'])
def get_information(message):
    if message.text == '–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ—Å–∏–ª–∫—É':
        bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –ø–æ—Å–∏–ª–∫–∏ –±–µ–∑ –ø—Ä–æ–±—ñ–ª—ñ–≤.')
        bot.register_next_step_handler(message, novaposhta_request)
    elif message.text == '–ü–µ—Ä–µ–≤–∞–≥–∏ –±–æ—Ç–∞':
        bot.send_message(message.chat.id, f'‚è∞ –ß–∞—Å –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è: 2-3 —Å–µ–∫—É–Ω–¥–∏. \n\nüì± –ó—Ä—É—á–Ω—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è: –ù–∞ –≤—Å—ñ—Ö –ø—Ä–∏—Å—Ç—Ä–æ—è—Ö. \n\nüí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å —Ç—Ä–µ–∫—ñ–Ω–≥—É: –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ. \n\n‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è: –ù–µ –ø–æ—Ç—Ä—ñ–±–Ω–∞. \n\nüéØ –¢–æ—á–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö: –ì–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ API. \n\nü•∑ –ê–Ω–æ–Ω—ñ–º–Ω—ñ—Å—Ç—å: –î–∞–Ω—ñ –Ω–µ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è.')
    else:
        pass

def novaposhta_request(message):
    parcel = message.text.replace(' ', '')
    if parcel.isdigit():
        api_url = 'https://api.novaposhta.ua/v2.0/json/'
        json_data = {
            "apiKey": "YOUR NOVAPOST API KEY",
            "modelName": "TrackingDocument",
            "calledMethod": "getStatusDocuments",
            "methodProperties": {"Documents": [{"DocumentNumber": f"{parcel}"}]}
        }

        r = requests.post(url=api_url, json=json_data)

        if r.status_code == 200:
            request = bot.send_message(message.chat.id, '–û—Ç—Ä–∏–º—É—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é...')
            sleep(2)
            bot.delete_message(message.chat.id, request.message_id)

            # prepare answer to user
            try:
                payload = json.loads(r.text)
                p = payload['data'][0]
                if not p['DocumentCost']:
                    answer = f"–°—Ç–∞—Ç—É—Å –ø–æ—Å–∏–ª–∫–∏: {p['Status']}\n\n–ú—ñ—Å—Ç–æ –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫: \"{p['CitySender']}\".\n–ú—ñ—Å—Ç–æ –æ—Ç—Ä–∏–º—É–≤–∞—á: \"{p['CityRecipient']}\".\n\n–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è: {p['DateCreated']}.\n–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {p['ScheduledDeliveryDate']}.\n\n–í–∞–≥–∞: {p['FactualWeight']}.\n–í–∞—Ä—Ç—ñ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ."
                else:
                    answer = f"–°—Ç–∞—Ç—É—Å –ø–æ—Å–∏–ª–∫–∏: {p['Status']}\n\n–ú—ñ—Å—Ç–æ –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫: \"{p['CitySender']}\".\n–ú—ñ—Å—Ç–æ –æ—Ç—Ä–∏–º—É–≤–∞—á: \"{p['CityRecipient']}\".\n\n–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è: {p['DateCreated']}.\n–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {p['ScheduledDeliveryDate']}.\n\n–í–∞–≥–∞: {p['FactualWeight']}.\n–í–∞—Ä—Ç—ñ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: {p['DocumentCost']}–≥—Ä–Ω."
                bot.send_message(message.chat.id, answer)
            except IndexError:
                bot.send_message(message.chat.id, '–¢–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–∞–∫–ª–∞–¥–Ω–æ—ó –Ω–µ–º–∞—î, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.')
                bot.register_next_step_handler(message, novaposhta_request)
        else:
            bot.send_message(message.chat.id, '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –ø—Ä–æ –ø–æ—Å–∏–ª–∫—É.')
    elif message.text == '/start':
        if message.from_user.last_name:
            bot.send_message(message.chat.id, f'–ü—Ä–∏–≤—ñ—Ç {message.from_user.first_name} {message.from_user.last_name}! –Ø –±–æ—Ç –∫–æ—Ç—Ä–∏–π –≤—ñ–¥—Å–ª—ñ–¥–∫–æ–≤—É—î –ø–æ—Å–∏–ª–∫–∏ –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏. –î–ª—è —Ç–æ–≥–æ —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ—Å–∏–ª–∫—É - –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –æ –ø–æ—Å–∏–ª—Ü—ñ".', reply_markup=kb)
        else:
            bot.send_message(message.chat.id, f'–ü—Ä–∏–≤—ñ—Ç {message.from_user.first_name}! –Ø –±–æ—Ç –∫–æ—Ç—Ä–∏–π –≤—ñ–¥—Å–ª—ñ–¥–∫–æ–≤—É—î –ø–æ—Å–∏–ª–∫–∏ –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏. –î–ª—è —Ç–æ–≥–æ —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ—Å–∏–ª–∫—É - –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –æ –ø–æ—Å–∏–ª—Ü—ñ".', reply_markup=kb)
    elif message.text == '–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ—Å–∏–ª–∫—É':
        bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –ø–æ—Å–∏–ª–∫–∏.')
        bot.register_next_step_handler(message, novaposhta_request)
    else:
        bot.send_message(message.chat.id, '–ù–æ–º–µ—Ä –ø–æ—Å–∏–ª–∫–∏ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —Ç—ñ–ª—å–∫–∏ –∑ —Ü–∏—Ñ—Ä.')
        bot.register_next_step_handler(message, novaposhta_request)

bot.infinity_polling()
